// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pswmgr.proto
#ifndef GRPC_pswmgr_2eproto__INCLUDED
#define GRPC_pswmgr_2eproto__INCLUDED

#include "pswmgr.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace pswmgr {

class Authentication final {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Authenticate(::grpc::ClientContext* context, const ::pswmgr::AuthenticationRequest& request, ::pswmgr::AuthReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pswmgr::AuthReply>> AsyncAuthenticate(::grpc::ClientContext* context, const ::pswmgr::AuthenticationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pswmgr::AuthReply>>(AsyncAuthenticateRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pswmgr::AuthReply>* AsyncAuthenticateRaw(::grpc::ClientContext* context, const ::pswmgr::AuthenticationRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Authenticate(::grpc::ClientContext* context, const ::pswmgr::AuthenticationRequest& request, ::pswmgr::AuthReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pswmgr::AuthReply>> AsyncAuthenticate(::grpc::ClientContext* context, const ::pswmgr::AuthenticationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pswmgr::AuthReply>>(AsyncAuthenticateRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::pswmgr::AuthReply>* AsyncAuthenticateRaw(::grpc::ClientContext* context, const ::pswmgr::AuthenticationRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_Authenticate_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Authenticate(::grpc::ServerContext* context, const ::pswmgr::AuthenticationRequest* request, ::pswmgr::AuthReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Authenticate() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* context, const ::pswmgr::AuthenticationRequest* request, ::pswmgr::AuthReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuthenticate(::grpc::ServerContext* context, ::pswmgr::AuthenticationRequest* request, ::grpc::ServerAsyncResponseWriter< ::pswmgr::AuthReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Authenticate<Service > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Authenticate() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* context, const ::pswmgr::AuthenticationRequest* request, ::pswmgr::AuthReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Authenticate() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::pswmgr::AuthenticationRequest, ::pswmgr::AuthReply>(std::bind(&WithStreamedUnaryMethod_Authenticate<BaseClass>::StreamedAuthenticate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* context, const ::pswmgr::AuthenticationRequest* request, ::pswmgr::AuthReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAuthenticate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pswmgr::AuthenticationRequest,::pswmgr::AuthReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Authenticate<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Authenticate<Service > StreamedService;
};

class PasswordManager final {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ListPasswords(::grpc::ClientContext* context, const ::pswmgr::SimpleRequest& request, ::pswmgr::PasswordList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pswmgr::PasswordList>> AsyncListPasswords(::grpc::ClientContext* context, const ::pswmgr::SimpleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pswmgr::PasswordList>>(AsyncListPasswordsRaw(context, request, cq));
    }
    virtual ::grpc::Status AddPassword(::grpc::ClientContext* context, const ::pswmgr::PasswordEntry& request, ::pswmgr::SimpleReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pswmgr::SimpleReply>> AsyncAddPassword(::grpc::ClientContext* context, const ::pswmgr::PasswordEntry& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pswmgr::SimpleReply>>(AsyncAddPasswordRaw(context, request, cq));
    }
    virtual ::grpc::Status DeletePassword(::grpc::ClientContext* context, const ::pswmgr::PasswordEntry& request, ::pswmgr::SimpleReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pswmgr::SimpleReply>> AsyncDeletePassword(::grpc::ClientContext* context, const ::pswmgr::PasswordEntry& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pswmgr::SimpleReply>>(AsyncDeletePasswordRaw(context, request, cq));
    }
    virtual ::grpc::Status ModifyPassword(::grpc::ClientContext* context, const ::pswmgr::PasswordEntry& request, ::pswmgr::SimpleReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pswmgr::SimpleReply>> AsyncModifyPassword(::grpc::ClientContext* context, const ::pswmgr::PasswordEntry& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pswmgr::SimpleReply>>(AsyncModifyPasswordRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pswmgr::PasswordList>* AsyncListPasswordsRaw(::grpc::ClientContext* context, const ::pswmgr::SimpleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pswmgr::SimpleReply>* AsyncAddPasswordRaw(::grpc::ClientContext* context, const ::pswmgr::PasswordEntry& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pswmgr::SimpleReply>* AsyncDeletePasswordRaw(::grpc::ClientContext* context, const ::pswmgr::PasswordEntry& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pswmgr::SimpleReply>* AsyncModifyPasswordRaw(::grpc::ClientContext* context, const ::pswmgr::PasswordEntry& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ListPasswords(::grpc::ClientContext* context, const ::pswmgr::SimpleRequest& request, ::pswmgr::PasswordList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pswmgr::PasswordList>> AsyncListPasswords(::grpc::ClientContext* context, const ::pswmgr::SimpleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pswmgr::PasswordList>>(AsyncListPasswordsRaw(context, request, cq));
    }
    ::grpc::Status AddPassword(::grpc::ClientContext* context, const ::pswmgr::PasswordEntry& request, ::pswmgr::SimpleReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pswmgr::SimpleReply>> AsyncAddPassword(::grpc::ClientContext* context, const ::pswmgr::PasswordEntry& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pswmgr::SimpleReply>>(AsyncAddPasswordRaw(context, request, cq));
    }
    ::grpc::Status DeletePassword(::grpc::ClientContext* context, const ::pswmgr::PasswordEntry& request, ::pswmgr::SimpleReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pswmgr::SimpleReply>> AsyncDeletePassword(::grpc::ClientContext* context, const ::pswmgr::PasswordEntry& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pswmgr::SimpleReply>>(AsyncDeletePasswordRaw(context, request, cq));
    }
    ::grpc::Status ModifyPassword(::grpc::ClientContext* context, const ::pswmgr::PasswordEntry& request, ::pswmgr::SimpleReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pswmgr::SimpleReply>> AsyncModifyPassword(::grpc::ClientContext* context, const ::pswmgr::PasswordEntry& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pswmgr::SimpleReply>>(AsyncModifyPasswordRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::pswmgr::PasswordList>* AsyncListPasswordsRaw(::grpc::ClientContext* context, const ::pswmgr::SimpleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pswmgr::SimpleReply>* AsyncAddPasswordRaw(::grpc::ClientContext* context, const ::pswmgr::PasswordEntry& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pswmgr::SimpleReply>* AsyncDeletePasswordRaw(::grpc::ClientContext* context, const ::pswmgr::PasswordEntry& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pswmgr::SimpleReply>* AsyncModifyPasswordRaw(::grpc::ClientContext* context, const ::pswmgr::PasswordEntry& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_ListPasswords_;
    const ::grpc::RpcMethod rpcmethod_AddPassword_;
    const ::grpc::RpcMethod rpcmethod_DeletePassword_;
    const ::grpc::RpcMethod rpcmethod_ModifyPassword_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ListPasswords(::grpc::ServerContext* context, const ::pswmgr::SimpleRequest* request, ::pswmgr::PasswordList* response);
    virtual ::grpc::Status AddPassword(::grpc::ServerContext* context, const ::pswmgr::PasswordEntry* request, ::pswmgr::SimpleReply* response);
    virtual ::grpc::Status DeletePassword(::grpc::ServerContext* context, const ::pswmgr::PasswordEntry* request, ::pswmgr::SimpleReply* response);
    virtual ::grpc::Status ModifyPassword(::grpc::ServerContext* context, const ::pswmgr::PasswordEntry* request, ::pswmgr::SimpleReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListPasswords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListPasswords() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListPasswords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPasswords(::grpc::ServerContext* context, const ::pswmgr::SimpleRequest* request, ::pswmgr::PasswordList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListPasswords(::grpc::ServerContext* context, ::pswmgr::SimpleRequest* request, ::grpc::ServerAsyncResponseWriter< ::pswmgr::PasswordList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddPassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddPassword() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AddPassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPassword(::grpc::ServerContext* context, const ::pswmgr::PasswordEntry* request, ::pswmgr::SimpleReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddPassword(::grpc::ServerContext* context, ::pswmgr::PasswordEntry* request, ::grpc::ServerAsyncResponseWriter< ::pswmgr::SimpleReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeletePassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeletePassword() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeletePassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePassword(::grpc::ServerContext* context, const ::pswmgr::PasswordEntry* request, ::pswmgr::SimpleReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeletePassword(::grpc::ServerContext* context, ::pswmgr::PasswordEntry* request, ::grpc::ServerAsyncResponseWriter< ::pswmgr::SimpleReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ModifyPassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ModifyPassword() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ModifyPassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModifyPassword(::grpc::ServerContext* context, const ::pswmgr::PasswordEntry* request, ::pswmgr::SimpleReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestModifyPassword(::grpc::ServerContext* context, ::pswmgr::PasswordEntry* request, ::grpc::ServerAsyncResponseWriter< ::pswmgr::SimpleReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListPasswords<WithAsyncMethod_AddPassword<WithAsyncMethod_DeletePassword<WithAsyncMethod_ModifyPassword<Service > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_ListPasswords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListPasswords() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListPasswords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPasswords(::grpc::ServerContext* context, const ::pswmgr::SimpleRequest* request, ::pswmgr::PasswordList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddPassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddPassword() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AddPassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPassword(::grpc::ServerContext* context, const ::pswmgr::PasswordEntry* request, ::pswmgr::SimpleReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeletePassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeletePassword() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeletePassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePassword(::grpc::ServerContext* context, const ::pswmgr::PasswordEntry* request, ::pswmgr::SimpleReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ModifyPassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ModifyPassword() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ModifyPassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModifyPassword(::grpc::ServerContext* context, const ::pswmgr::PasswordEntry* request, ::pswmgr::SimpleReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListPasswords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListPasswords() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::pswmgr::SimpleRequest, ::pswmgr::PasswordList>(std::bind(&WithStreamedUnaryMethod_ListPasswords<BaseClass>::StreamedListPasswords, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListPasswords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListPasswords(::grpc::ServerContext* context, const ::pswmgr::SimpleRequest* request, ::pswmgr::PasswordList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListPasswords(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pswmgr::SimpleRequest,::pswmgr::PasswordList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddPassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AddPassword() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::pswmgr::PasswordEntry, ::pswmgr::SimpleReply>(std::bind(&WithStreamedUnaryMethod_AddPassword<BaseClass>::StreamedAddPassword, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AddPassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddPassword(::grpc::ServerContext* context, const ::pswmgr::PasswordEntry* request, ::pswmgr::SimpleReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddPassword(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pswmgr::PasswordEntry,::pswmgr::SimpleReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeletePassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeletePassword() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::pswmgr::PasswordEntry, ::pswmgr::SimpleReply>(std::bind(&WithStreamedUnaryMethod_DeletePassword<BaseClass>::StreamedDeletePassword, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeletePassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeletePassword(::grpc::ServerContext* context, const ::pswmgr::PasswordEntry* request, ::pswmgr::SimpleReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeletePassword(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pswmgr::PasswordEntry,::pswmgr::SimpleReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ModifyPassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ModifyPassword() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::StreamedUnaryHandler< ::pswmgr::PasswordEntry, ::pswmgr::SimpleReply>(std::bind(&WithStreamedUnaryMethod_ModifyPassword<BaseClass>::StreamedModifyPassword, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ModifyPassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ModifyPassword(::grpc::ServerContext* context, const ::pswmgr::PasswordEntry* request, ::pswmgr::SimpleReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedModifyPassword(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pswmgr::PasswordEntry,::pswmgr::SimpleReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListPasswords<WithStreamedUnaryMethod_AddPassword<WithStreamedUnaryMethod_DeletePassword<WithStreamedUnaryMethod_ModifyPassword<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListPasswords<WithStreamedUnaryMethod_AddPassword<WithStreamedUnaryMethod_DeletePassword<WithStreamedUnaryMethod_ModifyPassword<Service > > > > StreamedService;
};

class UserManagement final {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateUser(::grpc::ClientContext* context, const ::pswmgr::UserCreationRequest& request, ::pswmgr::UserCreationReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pswmgr::UserCreationReply>> AsyncCreateUser(::grpc::ClientContext* context, const ::pswmgr::UserCreationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pswmgr::UserCreationReply>>(AsyncCreateUserRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateUserPassword(::grpc::ClientContext* context, const ::pswmgr::UserPasswordUpdateRequest& request, ::pswmgr::SimpleReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pswmgr::SimpleReply>> AsyncUpdateUserPassword(::grpc::ClientContext* context, const ::pswmgr::UserPasswordUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pswmgr::SimpleReply>>(AsyncUpdateUserPasswordRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pswmgr::UserCreationReply>* AsyncCreateUserRaw(::grpc::ClientContext* context, const ::pswmgr::UserCreationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pswmgr::SimpleReply>* AsyncUpdateUserPasswordRaw(::grpc::ClientContext* context, const ::pswmgr::UserPasswordUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateUser(::grpc::ClientContext* context, const ::pswmgr::UserCreationRequest& request, ::pswmgr::UserCreationReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pswmgr::UserCreationReply>> AsyncCreateUser(::grpc::ClientContext* context, const ::pswmgr::UserCreationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pswmgr::UserCreationReply>>(AsyncCreateUserRaw(context, request, cq));
    }
    ::grpc::Status UpdateUserPassword(::grpc::ClientContext* context, const ::pswmgr::UserPasswordUpdateRequest& request, ::pswmgr::SimpleReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pswmgr::SimpleReply>> AsyncUpdateUserPassword(::grpc::ClientContext* context, const ::pswmgr::UserPasswordUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pswmgr::SimpleReply>>(AsyncUpdateUserPasswordRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::pswmgr::UserCreationReply>* AsyncCreateUserRaw(::grpc::ClientContext* context, const ::pswmgr::UserCreationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pswmgr::SimpleReply>* AsyncUpdateUserPasswordRaw(::grpc::ClientContext* context, const ::pswmgr::UserPasswordUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_CreateUser_;
    const ::grpc::RpcMethod rpcmethod_UpdateUserPassword_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateUser(::grpc::ServerContext* context, const ::pswmgr::UserCreationRequest* request, ::pswmgr::UserCreationReply* response);
    virtual ::grpc::Status UpdateUserPassword(::grpc::ServerContext* context, const ::pswmgr::UserPasswordUpdateRequest* request, ::pswmgr::SimpleReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateUser() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateUser(::grpc::ServerContext* context, const ::pswmgr::UserCreationRequest* request, ::pswmgr::UserCreationReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateUser(::grpc::ServerContext* context, ::pswmgr::UserCreationRequest* request, ::grpc::ServerAsyncResponseWriter< ::pswmgr::UserCreationReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateUserPassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateUserPassword() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UpdateUserPassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserPassword(::grpc::ServerContext* context, const ::pswmgr::UserPasswordUpdateRequest* request, ::pswmgr::SimpleReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateUserPassword(::grpc::ServerContext* context, ::pswmgr::UserPasswordUpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::pswmgr::SimpleReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateUser<WithAsyncMethod_UpdateUserPassword<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_CreateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateUser() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateUser(::grpc::ServerContext* context, const ::pswmgr::UserCreationRequest* request, ::pswmgr::UserCreationReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateUserPassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateUserPassword() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UpdateUserPassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUserPassword(::grpc::ServerContext* context, const ::pswmgr::UserPasswordUpdateRequest* request, ::pswmgr::SimpleReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateUser() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::pswmgr::UserCreationRequest, ::pswmgr::UserCreationReply>(std::bind(&WithStreamedUnaryMethod_CreateUser<BaseClass>::StreamedCreateUser, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateUser(::grpc::ServerContext* context, const ::pswmgr::UserCreationRequest* request, ::pswmgr::UserCreationReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pswmgr::UserCreationRequest,::pswmgr::UserCreationReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateUserPassword : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateUserPassword() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::pswmgr::UserPasswordUpdateRequest, ::pswmgr::SimpleReply>(std::bind(&WithStreamedUnaryMethod_UpdateUserPassword<BaseClass>::StreamedUpdateUserPassword, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateUserPassword() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateUserPassword(::grpc::ServerContext* context, const ::pswmgr::UserPasswordUpdateRequest* request, ::pswmgr::SimpleReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateUserPassword(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pswmgr::UserPasswordUpdateRequest,::pswmgr::SimpleReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateUser<WithStreamedUnaryMethod_UpdateUserPassword<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateUser<WithStreamedUnaryMethod_UpdateUserPassword<Service > > StreamedService;
};

}  // namespace pswmgr


#endif  // GRPC_pswmgr_2eproto__INCLUDED
